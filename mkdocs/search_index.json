{
    "docs": [
        {
            "location": "/",
            "text": "pynd - search within Python code\n\u00b6\n\n\n\n\n\n\nYou say it like \nfind\n, but with a \np\n. \npind\n.\n\n\npynd helps you navigate and find what you are looking for in Python codebases.\n\n\n\n\nFind and list all public functions with \npynd --def --public\n\n\nLook for each time a class instance was created \npynd ClassName --call\n\n\nSearch only within docstrings \npynd \"search term\" --doc\n\n\n\n\nSee further examples and the output further down...\n\n\nInstallation\n\u00b6\n\n\nWe recommend installation with pip.\n\n\n$ pip install pynd\n$ pynd -h\n\n\n\n\n\n\n\nWarning\n\n\npynd is in very early stages of development. Almost anything could change\nwithout warning. You have been warned ;-)\n\n\n\n\nPlatform support\n\u00b6\n\n\nWe recommend Python 3.4 or above. pynd was written for Python 3 and backported\nto Python 2.7. It is supported and tested under Linux and OSX. Python 2 and\nWindows support are done on a \"best effort\" basis.\n\n\nWhat & Why?\n\u00b6\n\n\nPynd is a bit like grep, but it understand Python syntax. This means you can\ndo things like search within docstrings only or list and search function names.\n\n\nUsage Examples\n\u00b6\n\n\nSearch everything\n\u00b6\n\n\nBy default, pynd will accept a pattern and use that to check against all the\nAST nodes that it understands. This means, you can easily search across \nfunctions, class, docstrings and calls.\n\n\n$ pynd call --ignore-case\n./pynd/filters.py\n124:class CallFilter(NodeTypeFilter):\n165:        CallFilter('C', 'call', (ast.Call, ),\n\n./pynd/pattern.py\n27:    def __call__(self, value):\n\n./pynd/_tests/test_main.py\n22:    mocked_search.assert_called_once_with(cli.parse_args(['.']))\n\n\n\n\n\nIn the above example we search for the pattern \"call\" everywhere in a \ncase-insensitive search.\n\n\nListing and searching within Python\n\u00b6\n\n\nList all the Python classes in every Python file under the current working\ndirectory.\n\n\n$ pynd --class\n./pynd/astutils.py\n22:class ASTWalker(object):\n\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n85:class DocString(NodeTypeFilter):\n109:class NameFilter(NodeTypeFilter):\n\n\n\n\n\nFind all classes that match a pattern.\n\n\n$ pynd AST --class\n./pynd/astutils.py\n22:class ASTWalker(object):\n\n\n\n\n\nThe \n--class\n argument can be replaced or used in combination with other node\ntypes. For example, find all functions or classes that contain the word \ntest\n.\n\n\n$ pynd filter --class --def --ignore-case\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n109:class NameFilter(NodeTypeFilter):\n121:def get_all_filters():\n136:def get_active_filters(args):\n\n\n\n\n\nFinding the definition and usage\n\u00b6\n\n\nFinding where a function is defined can be useful, but we also want to know\nwhere it is used.\n\n\n$ pynd get_all_filters --def --call\n./pynd/cli.py\n50:    for f in filters.get_all_filters():\n\n./pynd/filters.py\n153:def get_all_filters():\n172:    return [f for f in get_all_filters() if f.is_activated(args)]\n\n./pynd/search.py\n55:        activated_filters = filters.get_all_filters()\n\n\n\n\n\nNote, this uses a simple name match - so if you have multiple functions with\nthe same name, it will find them all.\n\n\nDocstrings\n\u00b6\n\n\nSearching within docstrings is simple with pynd. It works in a similar way\nas the other node matches, but it will output the full docstring and the \nclass or function that it is attached to.\n\n\n$ pynd TODO --doc\n./pynd/filters.py\n103:    def get_source(self, path, node):\nGet the source line for a particular node.\n\nTODO: Strippng the last line here is a hack - how should we do it\nproperly?\n\n\n\n\n\nThe above search will find all docstrings that contain TODO. If no term is \nprovided, then all docstrings will be displayed.\n\n\nPublic & Private\n\u00b6\n\n\nThe flags \n--private\n and \n--public\n can be used to filter by the common Python\nconvention of a leading underscore to mark someting as private. This means\nthat \n--private\n will only match results starting with a underscore and \n\n--public\n will only match results starting without. These can be used in \ncombination with other searched but can't both be used together.\n\n\npynd --private --def\n./pynd/astutils.py\n34:    def _is_python(self, path):\n38:    def _is_ignored(self, directory):\n44:    def _walk_files(self, path):\n66:    def _read(self, file_path):\n\n./pynd/filters.py\n101:    def _get_docstring(self, node):\n\n\n\n\n\nSupported Node Types\n\u00b6\n\n\npynd currently supports the following node types.\n\n\n\n\n--doc\n - matches within docstrings\n\n\n--class\n - Matches classes.\n\n\n--def\n - All function definitions.\n\n\n--import\n - Matches import statements\n\n\n--call\n - Matches calls to functions or new classes\n\n\n--attr\n - Matches attributes on objects\n\n\n\n\nShow full usage\n\u00b6\n\n\nusage: pynd [-h] [--version] [--ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]]\n            [--ignore-case] [--files-with-matches] [--show-stats]\n            [--public | --private] [--verbose | --debug] [-d] [-c] [-f] [-F]\n            [-m] [-j] [-i] [-C] [-a]\n            [PATTERN] [FILES OR DIRECTORIES [FILES OR DIRECTORIES ...]]\n\nSearch for PATTERN in each Python file in filesystem from the current\ndirectory down. If any files or directories are specified then only those are\nchecked.\n\npositional arguments:\n  PATTERN               The pattern to match against. This must be a valid\n                        Python regular expression.\n  FILES OR DIRECTORIES  A file or directory to limit the search scope. This\n                        can be provided multiple times.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]\n                        A pattern to exclude directories. This must be a valid\n                        Python regular expression. It can be provided multiple\n                        times.\n  --ignore-case         Make all the regular expression matching case\n                        insesitive.\n  --files-with-matches  Don't output all the results, just the paths to files\n                        that contain a result.\n  --show-stats          At the end, show some stats.\n  --public              Only show results considered to be public in Python.\n                        They don't start with an underscore.\n  --private             Only show results considered to be private in Python.\n                        They start with an underscore.\n  --verbose             Explain what is happening.\n  --debug               Output excessively to make debugging easier\n  -d, --doc             Match class and function docstrings.\n  -c, --class           Match class names.\n  -f, --def             Match all defs.\n  -F, --function        Match function names at the module level.\n  -m, --method          Match class method names.\n  -j, --closure         Match closure def names.\n  -i, --import          Match imported package names.\n  -C, --call            Match call statements.\n  -a, --attr            Match attributes on objects",
            "title": "Home"
        },
        {
            "location": "/#pynd-search-within-python-code",
            "text": "You say it like  find , but with a  p .  pind .  pynd helps you navigate and find what you are looking for in Python codebases.   Find and list all public functions with  pynd --def --public  Look for each time a class instance was created  pynd ClassName --call  Search only within docstrings  pynd \"search term\" --doc   See further examples and the output further down...",
            "title": "pynd - search within Python code"
        },
        {
            "location": "/#installation",
            "text": "We recommend installation with pip.  $ pip install pynd\n$ pynd -h   Warning  pynd is in very early stages of development. Almost anything could change\nwithout warning. You have been warned ;-)",
            "title": "Installation"
        },
        {
            "location": "/#platform-support",
            "text": "We recommend Python 3.4 or above. pynd was written for Python 3 and backported\nto Python 2.7. It is supported and tested under Linux and OSX. Python 2 and\nWindows support are done on a \"best effort\" basis.",
            "title": "Platform support"
        },
        {
            "location": "/#what-why",
            "text": "Pynd is a bit like grep, but it understand Python syntax. This means you can\ndo things like search within docstrings only or list and search function names.",
            "title": "What &amp; Why?"
        },
        {
            "location": "/#usage-examples",
            "text": "",
            "title": "Usage Examples"
        },
        {
            "location": "/#search-everything",
            "text": "By default, pynd will accept a pattern and use that to check against all the\nAST nodes that it understands. This means, you can easily search across \nfunctions, class, docstrings and calls.  $ pynd call --ignore-case\n./pynd/filters.py\n124:class CallFilter(NodeTypeFilter):\n165:        CallFilter('C', 'call', (ast.Call, ),\n\n./pynd/pattern.py\n27:    def __call__(self, value):\n\n./pynd/_tests/test_main.py\n22:    mocked_search.assert_called_once_with(cli.parse_args(['.']))  In the above example we search for the pattern \"call\" everywhere in a \ncase-insensitive search.",
            "title": "Search everything"
        },
        {
            "location": "/#listing-and-searching-within-python",
            "text": "List all the Python classes in every Python file under the current working\ndirectory.  $ pynd --class\n./pynd/astutils.py\n22:class ASTWalker(object):\n\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n85:class DocString(NodeTypeFilter):\n109:class NameFilter(NodeTypeFilter):  Find all classes that match a pattern.  $ pynd AST --class\n./pynd/astutils.py\n22:class ASTWalker(object):  The  --class  argument can be replaced or used in combination with other node\ntypes. For example, find all functions or classes that contain the word  test .  $ pynd filter --class --def --ignore-case\n./pynd/filters.py\n20:class NodeTypeFilter(object):\n109:class NameFilter(NodeTypeFilter):\n121:def get_all_filters():\n136:def get_active_filters(args):",
            "title": "Listing and searching within Python"
        },
        {
            "location": "/#finding-the-definition-and-usage",
            "text": "Finding where a function is defined can be useful, but we also want to know\nwhere it is used.  $ pynd get_all_filters --def --call\n./pynd/cli.py\n50:    for f in filters.get_all_filters():\n\n./pynd/filters.py\n153:def get_all_filters():\n172:    return [f for f in get_all_filters() if f.is_activated(args)]\n\n./pynd/search.py\n55:        activated_filters = filters.get_all_filters()  Note, this uses a simple name match - so if you have multiple functions with\nthe same name, it will find them all.",
            "title": "Finding the definition and usage"
        },
        {
            "location": "/#docstrings",
            "text": "Searching within docstrings is simple with pynd. It works in a similar way\nas the other node matches, but it will output the full docstring and the \nclass or function that it is attached to.  $ pynd TODO --doc\n./pynd/filters.py\n103:    def get_source(self, path, node):\nGet the source line for a particular node.\n\nTODO: Strippng the last line here is a hack - how should we do it\nproperly?  The above search will find all docstrings that contain TODO. If no term is \nprovided, then all docstrings will be displayed.",
            "title": "Docstrings"
        },
        {
            "location": "/#public-private",
            "text": "The flags  --private  and  --public  can be used to filter by the common Python\nconvention of a leading underscore to mark someting as private. This means\nthat  --private  will only match results starting with a underscore and  --public  will only match results starting without. These can be used in \ncombination with other searched but can't both be used together.  pynd --private --def\n./pynd/astutils.py\n34:    def _is_python(self, path):\n38:    def _is_ignored(self, directory):\n44:    def _walk_files(self, path):\n66:    def _read(self, file_path):\n\n./pynd/filters.py\n101:    def _get_docstring(self, node):",
            "title": "Public &amp; Private"
        },
        {
            "location": "/#supported-node-types",
            "text": "pynd currently supports the following node types.   --doc  - matches within docstrings  --class  - Matches classes.  --def  - All function definitions.  --import  - Matches import statements  --call  - Matches calls to functions or new classes  --attr  - Matches attributes on objects",
            "title": "Supported Node Types"
        },
        {
            "location": "/#show-full-usage",
            "text": "usage: pynd [-h] [--version] [--ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]]\n            [--ignore-case] [--files-with-matches] [--show-stats]\n            [--public | --private] [--verbose | --debug] [-d] [-c] [-f] [-F]\n            [-m] [-j] [-i] [-C] [-a]\n            [PATTERN] [FILES OR DIRECTORIES [FILES OR DIRECTORIES ...]]\n\nSearch for PATTERN in each Python file in filesystem from the current\ndirectory down. If any files or directories are specified then only those are\nchecked.\n\npositional arguments:\n  PATTERN               The pattern to match against. This must be a valid\n                        Python regular expression.\n  FILES OR DIRECTORIES  A file or directory to limit the search scope. This\n                        can be provided multiple times.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --ignore-dir [IGNORE_DIR [IGNORE_DIR ...]]\n                        A pattern to exclude directories. This must be a valid\n                        Python regular expression. It can be provided multiple\n                        times.\n  --ignore-case         Make all the regular expression matching case\n                        insesitive.\n  --files-with-matches  Don't output all the results, just the paths to files\n                        that contain a result.\n  --show-stats          At the end, show some stats.\n  --public              Only show results considered to be public in Python.\n                        They don't start with an underscore.\n  --private             Only show results considered to be private in Python.\n                        They start with an underscore.\n  --verbose             Explain what is happening.\n  --debug               Output excessively to make debugging easier\n  -d, --doc             Match class and function docstrings.\n  -c, --class           Match class names.\n  -f, --def             Match all defs.\n  -F, --function        Match function names at the module level.\n  -m, --method          Match class method names.\n  -j, --closure         Match closure def names.\n  -i, --import          Match imported package names.\n  -C, --call            Match call statements.\n  -a, --attr            Match attributes on objects",
            "title": "Show full usage"
        },
        {
            "location": "/roadmap/",
            "text": "Roadmap & Goals\n\u00b6\n\n\nThe project goals and roadmap.\n\n\nGoals\n\u00b6\n\n\npynd should...\n\n\n\n\nmake it easy to navigate large Python projects from the command line\n\n\nunderstand Python syntax and common conventions\n\n\nnever import or execute Python code and should use static analysis only\n\n\n\n\nRoadmap\n\u00b6\n\n\nThe project roadmap is still being determined. The initial goal is to reach\na workable state that has enough functionality for people to evaluate the \nproject idea.",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#roadmap-goals",
            "text": "The project goals and roadmap.",
            "title": "Roadmap &amp; Goals"
        },
        {
            "location": "/roadmap/#goals",
            "text": "pynd should...   make it easy to navigate large Python projects from the command line  understand Python syntax and common conventions  never import or execute Python code and should use static analysis only",
            "title": "Goals"
        },
        {
            "location": "/roadmap/#roadmap",
            "text": "The project roadmap is still being determined. The initial goal is to reach\na workable state that has enough functionality for people to evaluate the \nproject idea.",
            "title": "Roadmap"
        },
        {
            "location": "/contributing/",
            "text": "i# Contributing to pynd\n\n\nAn introduction to contributing to the pynd project.\n\n\nThe pynd project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:\n\n\n\n\nCode patches via pull requests\n\n\nDocumentation improvements\n\n\nBug reports and patch reviews\n\n\n\n\nCode of Conduct\n\u00b6\n\n\nEveryone interacting in the pynd project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the \nPyPA Code of Conduct\n.\n\n\nReporting an Issue\n\u00b6\n\n\nPlease include as much detail as you can. Let us know your platform and pynd \nversion. Include steps to reproduce and command line output of the issue. The \n\n--verbose\n and \n--debug\n flags will greatly increase the output and help us\ntrack down the problem.\n\n\nTesting the Development Version\n\u00b6\n\n\nIf you want to just install and try out the latest development version of\npynd you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is \nstrongly\n recommended\nthat you do this within a \nvirtualenv\n.\n\n\npip install https://github.com/d0ugal/pynd/archive/master.tar.gz\n\n\n\n\n\nInstalling for Development\n\u00b6\n\n\nFirst you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command. It is \nstrongly\n recommended that you do\nthis within a \nvirtualenv\n.\n\n\npip install --editable .\n\n\n\n\n\nThis will install pynd in development mode which binds the \npynd\n command\nto the git repository.\n\n\nRunning the tests\n\u00b6\n\n\nTo run the tests, it is recommended that you use \nTox\n. This just needs\nto be pip installed and then the test suite can be ran for pynd by running\nthe command \ntox\n in the root of your pynd repository.\n\n\nIt will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by \nTravis\n when you submit a pull request.\n\n\nSubmitting Pull Requests\n\u00b6\n\n\nOnce you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#code-of-conduct",
            "text": "Everyone interacting in the pynd project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the  PyPA Code of Conduct .",
            "title": "Code of Conduct"
        },
        {
            "location": "/contributing/#reporting-an-issue",
            "text": "Please include as much detail as you can. Let us know your platform and pynd \nversion. Include steps to reproduce and command line output of the issue. The  --verbose  and  --debug  flags will greatly increase the output and help us\ntrack down the problem.",
            "title": "Reporting an Issue"
        },
        {
            "location": "/contributing/#testing-the-development-version",
            "text": "If you want to just install and try out the latest development version of\npynd you can do so with the following command. This can be useful if you\nwant to provide feedback for a new feature or want to confirm if a bug you\nhave encountered is fixed in the git master. It is  strongly  recommended\nthat you do this within a  virtualenv .  pip install https://github.com/d0ugal/pynd/archive/master.tar.gz",
            "title": "Testing the Development Version"
        },
        {
            "location": "/contributing/#installing-for-development",
            "text": "First you'll need to fork and clone the repository. Once you have a local\ncopy, run the following command. It is  strongly  recommended that you do\nthis within a  virtualenv .  pip install --editable .  This will install pynd in development mode which binds the  pynd  command\nto the git repository.",
            "title": "Installing for Development"
        },
        {
            "location": "/contributing/#running-the-tests",
            "text": "To run the tests, it is recommended that you use  Tox . This just needs\nto be pip installed and then the test suite can be ran for pynd by running\nthe command  tox  in the root of your pynd repository.  It will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by  Travis  when you submit a pull request.",
            "title": "Running the tests"
        },
        {
            "location": "/contributing/#submitting-pull-requests",
            "text": "Once you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Submitting Pull Requests"
        }
    ]
}